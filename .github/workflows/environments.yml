name: Validate Environment

on:
  workflow_dispatch:
  push:

jobs:
  validate-environments:
    name: Check Environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [test, dev]
    steps:
      - name: Validate environment exists and has required reviewers
        env:
          GITHUB_TOKEN: ${{ github.token }}
          ENVIRONMENT: ${{ matrix.environment }}
        run: |
          echo "Validating environment: ${ENVIRONMENT_NAME}"
          # Query the environment via REST API
          response=$(curl -sSL \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/skruijt-foreflight/github-actions-sandbox/environments" \
          )
      
          echo $response

          # Use jq to scan the 'environments' array for an entry with .name == ${ENVIRONMENT}
          found_name=$(echo "$response" | jq -r --arg env "${ENVIRONMENT}" '
          .environments[]?
          | select(.name == $env)
          | .name
          ')
          
          if [ -z "$found_name" ]; then
            echo "ERROR: Environment '${ENVIRONMENT}' was not found in the environments array."
            exit 1
          else
            echo "SUCCESS: Found environment named '${ENVIRONMENT}'. Checking protection rules..."
          fi

          # 2) Check if there's at least one rule with "type": "required_reviewers"
          required_reviewers_count=$(echo "$found_env" | jq '[.protection_rules[] | select(.type == "required_reviewers")] | length')
            
          if [ "$required_reviewers_count" -eq 0 ]; then
            echo "ERROR: Environment '$ENVIRONMENT' has no 'required_reviewers' rule."
            exit 1
          fi
          
          echo "SUCCESS: Environment '$ENVIRONMENT' has a required reviewers rule."